name: Deploy Application

on:
  push:
    branches:
      - master  # Déclenche le workflow lors d'un push sur la branche master
  workflow_dispatch:  # Permet de lancer manuellement le workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code
      - name: Checkout code
        uses: actions/checkout@v2
      # Cette étape utilise l'action GitHub `checkout` pour récupérer le code de la branche active.

      # Étape 2 : Configurer Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # Configure Docker Buildx pour la création d'images Docker multiplateformes.

      # Étape 3 : Installer Docker
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
          sudo apt-get update
          sudo apt-get install -y docker-ce
      # Cette étape installe Docker sur l’environnement virtuel pour construire et pousser les images Docker.

      # Étape 4 : Installer Docker Compose
      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION=1.29.2
          sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      # Installe Docker Compose, qui permet de gérer plusieurs conteneurs avec `docker-compose.yml`.

      # Étape 5 : Construire le frontend (si l'application a un dossier frontend séparé)
      - name: Build frontend
        run: |
          cd frontend  # Accède au dossier frontend
          npm install
          npm run build  # Génère le répertoire de build
      # Cette étape installe les dépendances et construit le frontend si nécessaire.

      # Étape 6 : Ajouter l'utilisateur au groupe Docker
      - name: Add user to Docker group
        run: |
          if ! getent group docker; then
            sudo groupadd docker
          fi
          sudo usermod -aG docker $USER
      # Assure que l’utilisateur courant a les permissions pour utiliser Docker.

      # Étape 7 : Connexion à Docker Hub
      - name: Login to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      # Utilise les secrets GitHub pour se connecter à Docker Hub et permettre de pousser les images.

      # Étape 8 : Construire et Pousser les Images Docker avec Docker Compose
      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push
      # Cette étape utilise Docker Compose pour construire et pousser les images définies dans `docker-compose.yml`.

      # Étape 9 : Déployer sur EC2
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          scp -i ssh_key.pem -o StrictHostKeyChecking=no docker-compose.yml $USER@$HOST:~/myapp
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no $USER@$HOST << EOF
            cd ~/myapp
            docker-compose down
            docker-compose up -d
          EOF
      # Cette étape se connecte à l'instance EC2 via SSH pour redéployer l’application.
      # Elle copie le fichier `docker-compose.yml` sur le serveur, arrête les conteneurs en cours, et démarre les nouveaux conteneurs en utilisant les images Docker mises à jour.
